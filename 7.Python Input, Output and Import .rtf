{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Tahoma-Bold;\f1\fnil\fcharset0 Tahoma;}
{\colortbl;\red255\green255\blue255;\red134\green19\blue62;\red255\green255\blue255;\red28\green26\blue75;
\red28\green26\blue75;\red8\green57\blue240;\red147\green0\blue147;\red42\green44\blue51;\red66\green147\blue62;
\red133\green85\blue4;\red50\green94\blue238;}
{\*\expandedcolortbl;;\cssrgb\c60282\c14051\c30968;\cssrgb\c100000\c100000\c100000;\cssrgb\c14510\c14902\c36863;
\cssrgb\c14510\c14902\c36863\c70196;\cssrgb\c1961\c33725\c95294;\cssrgb\c65098\c14902\c64314;\cssrgb\c21961\c22745\c25882;\cssrgb\c31373\c63137\c30980;
\cssrgb\c59608\c40784\c392;\cssrgb\c25098\c47059\c94902;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15540\viewkind0
\deftab720
\pard\pardeftab720\li518\fi-3\sl1080\sa400\partightenfactor0

\f0\b\fs18 \cf2 \cb3 \expnd0\expndtw0\kerning0
Python Input, Output and Import\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f1\b0 \cf5 This focuses on two built-in functions print() and input() to perform I/O task in Python. Also, you will learn to import modules and use them in your program.\
Python provides numerous\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/methods/built-in"}}{\fldrslt \cf6 built-in functions}}\'a0that are readily available to us at the Python prompt.\
Some of the functions like\'a0input()\'a0and\'a0print()\'a0are widely used for standard input and output operations respectively. Let us see the output section first.\cf4 \
\pard\pardeftab720\li518\fi-3\sl720\sa240\partightenfactor0

\f0\b \cf2 Python Output Using print() function\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f1\b0 \cf5 We use the\'a0print()\'a0function to output data to the standard output device (screen). We can also\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/file-operation"}}{\fldrslt \cf6 output data to a file}}, but this will be discussed later.\
An example of its use is given below.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf7 print\cf8 (\cf9 'This sentence is output to the screen'\cf8 )\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f0\b \cf5 Output
\f1\b0 \
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 This sentence is output to the screen\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 Another example is given below:\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf8 a = \cf10 5\cf8 \
\cf7 print\cf8 (\cf9 'The value of a is'\cf8 , a)\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f0\b \cf5 Output
\f1\b0 \
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 The value of a is 5\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 In the second\'a0print()\'a0statement, we can notice that space was added between the\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/string"}}{\fldrslt \cf6 string}}\'a0and the value of variable\'a0a. This is by default, but we can change it.\
The actual syntax of the\'a0print()\'a0function is:\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 Here,\'a0objects\'a0is the value(s) to be printed.\
The\'a0sep\'a0separator is used between the values. It defaults into a space character.\
After all values are printed,\'a0end\'a0is printed. It defaults into a new line.\
The\'a0file\'a0is the object where the values are printed and its default value is\'a0sys.stdout\'a0(screen). Here is an example to illustrate this.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf7 print\cf8 (\cf10 1\cf8 , \cf10 2\cf8 , \cf10 3\cf8 , \cf10 4\cf8 )\
\cf7 print\cf8 (\cf10 1\cf8 , \cf10 2\cf8 , \cf10 3\cf8 , \cf10 4\cf8 , sep=\cf9 '*'\cf8 )\
\cf7 print\cf8 (\cf10 1\cf8 , \cf10 2\cf8 , \cf10 3\cf8 , \cf10 4\cf8 , sep=\cf9 '#'\cf8 , end=\cf9 '&'\cf8 )\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f0\b \cf5 Output
\f1\b0 \
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 1 2 3 4\
1*2*3*4\
1#2#3#4&\
\pard\pardeftab720\li518\fi-3\sl720\sa240\partightenfactor0

\f0\b \cf2 Output formatting\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f1\b0 \cf5 Sometimes we would like to format our output to make it look attractive. This can be done by using the\'a0str.format()\'a0method. This method is visible to any string object.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf8 x = \cf10 5\cf8 ; y = \cf10 10\cf8 \
\cf11 >>> \cf7 print\cf8 (\cf9 'The value of x is \{\} and y is \{\}'\cf8 .format(x,y))\
The value of x \cf7 is\cf8  \cf10 5\cf8  \cf7 and\cf8  y \cf7 is\cf8  \cf10 10\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 Here, the curly braces\'a0\{\}\'a0are used as placeholders. We can specify the order in which they are printed by using numbers (tuple index).\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf7 print\cf8 (\cf9 'I love \{0\} and \{1\}'\cf8 .format(\cf9 'bread'\cf8 ,\cf9 'butter'\cf8 ))\
\cf7 print\cf8 (\cf9 'I love \{1\} and \{0\}'\cf8 .format(\cf9 'bread'\cf8 ,\cf9 'butter'\cf8 ))\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f0\b \cf2 Output
\f1\b0 \
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 I love bread and butter\
I love butter and bread\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 We can even use keyword arguments to format the string.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf7 print\cf8 (\cf9 'Hello \{name\}, \{greeting\}'\cf8 .format(greeting = \cf9 'Goodmorning'\cf8 , name = \cf9 'John'\cf8 ))\
Hello John, Goodmorning\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 We can also format strings like the old\'a0sprintf()\'a0style used in\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/c-programming"}}{\fldrslt \cf6 C programming language}}. We use the\'a0%\'a0operator to accomplish this.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf8 x = \cf10 12.3456789\cf8 \
\cf11 >>> \cf7 print\cf8 (\cf9 'The value of x is %3.2f'\cf8  %x)\
The value of x \cf7 is\cf8  \cf10 12.35\cf8 \
\cf11 >>> \cf7 print\cf8 (\cf9 'The value of x is %3.4f'\cf8  %x)\
The value of x \cf7 is\cf8  \cf10 12.3457\cf4 \
\pard\pardeftab720\li518\fi-3\sl720\sa240\partightenfactor0

\f0\b \cf2 Python Input\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f1\b0 \cf5 Up until now, our programs were static. The value of variables was defined or hard coded into the source code.\
To allow flexibility, we might want to take the input from the user. In Python, we have the\'a0input()\'a0function to allow this. The syntax for\'a0input()\'a0is:\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 input([prompt])\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 where\'a0prompt\'a0is the string we wish to display on the screen. It is optional.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf8 num = \cf7 input\cf8 (\cf9 'Enter a number: '\cf8 )\
Enter a number: \cf10 10\cf8 \
\cf11 >>> \cf8 num\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf9 '10'\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 Here, we can see that the entered value\'a010\'a0is a string, not a number. To convert this into a number we can use\'a0int()\'a0or\'a0float()\'a0functions.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf8 int(\cf9 '10'\cf8 )\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf10 10\cf8 \
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf8 float(\cf9 '10'\cf8 )\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf10 10.0\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 This same operation can be performed using the\'a0eval()\'a0function. But\'a0eval\'a0takes it further. It can evaluate even expressions, provided the input is a string\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf8 int(\cf9 '2+3'\cf8 )\
Traceback (most recent call last):\
  File \cf9 "<string>"\cf8 , line \cf10 301\cf8 , \cf7 in\cf8  runcode\
  File \cf9 "<interactive input>"\cf8 , line \cf10 1\cf8 , \cf7 in\cf8  <module>\
ValueError: invalid literal \cf7 for\cf8  int() \cf7 with\cf8  base \cf10 10\cf8 : \cf9 '2+3'\cf8 \
\cf11 >>> \cf8 eval(\cf9 '2+3'\cf8 )\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf10 5\cf4 \
\pard\pardeftab720\li518\fi-3\sl720\sa240\partightenfactor0

\f0\b \cf2 Python Import\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f1\b0 \cf5 When our program grows bigger, it is a good idea to break it into different modules.\
A module is a file containing Python definitions and statements.\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/modules"}}{\fldrslt \cf6 Python modules}}\'a0have a filename and end with the extension\'a0.py.\
Definitions inside a module can be imported to another module or the interactive interpreter in Python. We use the\'a0import\'a0keyword to do this.\
For example, we can import the\'a0math\'a0module by typing the following line:\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf7 import\cf8  math\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 We can use the module in the following ways:\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf7 import\cf8  math\
\cf7 print\cf8 (math.pi)\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0

\f0\b \cf5 Output
\f1\b0 \
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf4 3.141592653589793\
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 Now all the definitions inside\'a0math\'a0module are available in our scope. We can also import some specific attributes and functions only, using the\'a0from\'a0keyword. For example:\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf7 from\cf8  math \cf7 import\cf8  pi\
\cf11 >>> \cf8 pi\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf10 3.141592653589793\cf4 \
\pard\pardeftab720\li518\fi-3\sl600\sa320\partightenfactor0
\cf5 While importing a module, Python looks at several places defined in\'a0sys.path. It is a list of directory locations.\
\pard\pardeftab720\li518\fi-3\sl400\partightenfactor0
\cf11 >>> \cf7 import\cf8  sys\
\cf11 >>> \cf8 sys.path\
[\cf9 ''\cf8 , \
 \cf9 'C:\\\\Python33\\\\Lib\\\\idlelib'\cf8 , \
 \cf9 'C:\\\\Windows\\\\system32\\\\python33.zip'\cf8 , \
 \cf9 'C:\\\\Python33\\\\DLLs'\cf8 , \
 \cf9 'C:\\\\Python33\\\\lib'\cf8 , \
 \cf9 'C:\\\\Python33'\cf8 , \
 \cf9 'C:\\\\Python33\\\\lib\\\\site-packages'\cf8 ]\cf4 \
}
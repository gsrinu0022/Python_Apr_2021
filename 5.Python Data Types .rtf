{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Tahoma-Bold;\f1\fnil\fcharset0 Tahoma;}
{\colortbl;\red255\green255\blue255;\red134\green19\blue62;\red255\green255\blue255;\red28\green26\blue75;
\red28\green26\blue75;\red8\green57\blue240;\red42\green44\blue51;\red133\green85\blue4;\red147\green0\blue147;
\red66\green147\blue62;\red50\green94\blue238;\red143\green144\blue150;\red178\green113\blue6;}
{\*\expandedcolortbl;;\cssrgb\c60282\c14051\c30968;\cssrgb\c100000\c100000\c100000;\cssrgb\c14510\c14902\c36863;
\cssrgb\c14510\c14902\c36863\c70196;\cssrgb\c1961\c33725\c95294;\cssrgb\c21961\c22745\c25882;\cssrgb\c59608\c40784\c392;\cssrgb\c65098\c14902\c64314;
\cssrgb\c31373\c63137\c30980;\cssrgb\c25098\c47059\c94902;\cssrgb\c62745\c63137\c65490;\cssrgb\c75686\c51765\c392;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15540\viewkind0
\deftab720
\pard\pardeftab720\li417\fi-8\sl1080\sa400\partightenfactor0

\f0\b\fs18 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Python Data Types\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 In this, you will learn about different data types you can use in Python.\

\f0\b \cf2 \strokec4 Data types in Python\

\f1\b0 \cf5 \strokec5 Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.\
There are various data types in Python. Some of the important types are listed below.\

\f0\b \cf2 \strokec4 Python Numbers\

\f1\b0 \cf5 \strokec5 Integers, floating point numbers and complex numbers fall under\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/numbers"}}{\fldrslt \cf6 \strokec6 Python numbers}}\'a0category. They are defined as\'a0int,\'a0float\'a0and\'a0complex\'a0classes in Python.\
We can use the\'a0type()\'a0function to know which class a variable or a value belongs to. Similarly, the\'a0isinstance()\'a0function is used to check if an object belongs to a particular class.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 a = \cf8 \strokec8 5\cf7 \strokec7 \
\cf9 \strokec9 print\cf7 \strokec7 (a, \cf10 \strokec10 "is of type"\cf7 \strokec7 , type(a))\
\
a = \cf8 \strokec8 2.0\cf7 \strokec7 \
\cf9 \strokec9 print\cf7 \strokec7 (a, \cf10 \strokec10 "is of type"\cf7 \strokec7 , type(a))\
\
a = \cf8 \strokec8 1\cf7 \strokec7 +\cf8 \strokec8 2j\cf7 \strokec7 \
\cf9 \strokec9 print\cf7 \strokec7 (a, \cf10 \strokec10 "is complex number?"\cf7 \strokec7 , isinstance(\cf8 \strokec8 1\cf7 \strokec7 +\cf8 \strokec8 2j\cf7 \strokec7 ,complex))\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 5 is of type <class 'int'>\
2.0 is of type <class 'float'>\
(1+2j) is complex number? True\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Integers can be of any length, it is only limited by the memory available.\
A floating-point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points.\'a01\'a0is an integer,\'a01.0\'a0is a floating-point number.\
Complex numbers are written in the form,\'a0x + yj, where\'a0x\'a0is the real part and\'a0y\'a0is the imaginary part. Here are some examples.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 a = \cf8 \strokec8 1234567890123456789\cf7 \strokec7 \
\cf11 \strokec11 >>> \cf7 \strokec7 a\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf8 \strokec8 1234567890123456789\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 b = \cf8 \strokec8 0.1234567890123456789\cf7 \strokec7 \
\cf11 \strokec11 >>> \cf7 \strokec7 b\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf8 \strokec8 0.12345678901234568\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 c = \cf8 \strokec8 1\cf7 \strokec7 +\cf8 \strokec8 2j\cf7 \strokec7 \
\cf11 \strokec11 >>> \cf7 \strokec7 c\
(\cf8 \strokec8 1\cf7 \strokec7 +\cf8 \strokec8 2j\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Notice that the\'a0float\'a0variable\'a0b\'a0got truncated.\

\f0\b \cf2 \strokec4 Python List\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/list"}}{\fldrslt 
\f1\b0 \cf6 \strokec6 List}}
\f1\b0 \cf5 \strokec5 \'a0is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.\
Declaring a list is pretty straight forward. Items separated by commas are enclosed within brackets\'a0[ ].\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 a = [\cf8 \strokec8 1\cf7 \strokec7 , \cf8 \strokec8 2.2\cf7 \strokec7 , \cf10 \strokec10 'python'\cf7 \strokec7 ]\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 We can use the slicing operator\'a0[ ]\'a0to extract an item or a range of items from a list. The index starts from 0 in Python.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 a = [\cf8 \strokec8 5\cf7 \strokec7 ,\cf8 \strokec8 10\cf7 \strokec7 ,\cf8 \strokec8 15\cf7 \strokec7 ,\cf8 \strokec8 20\cf7 \strokec7 ,\cf8 \strokec8 25\cf7 \strokec7 ,\cf8 \strokec8 30\cf7 \strokec7 ,\cf8 \strokec8 35\cf7 \strokec7 ,\cf8 \strokec8 40\cf7 \strokec7 ]\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # a[2] = 15\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "a[2] = "\cf7 \strokec7 , a[\cf8 \strokec8 2\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # a[0:3] = [5, 10, 15]\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "a[0:3] = "\cf7 \strokec7 , a[\cf8 \strokec8 0\cf7 \strokec7 :\cf8 \strokec8 3\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # a[5:] = [30, 35, 40]\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "a[5:] = "\cf7 \strokec7 , a[\cf8 \strokec8 5\cf7 \strokec7 :])\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 a[2] =  15\
a[0:3] =  [5, 10, 15]\
a[5:] =  [30, 35, 40]\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Lists are mutable, meaning, the value of elements of a list can be altered.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 a = [\cf8 \strokec8 1\cf7 \strokec7 , \cf8 \strokec8 2\cf7 \strokec7 , \cf8 \strokec8 3\cf7 \strokec7 ]\
a[\cf8 \strokec8 2\cf7 \strokec7 ] = \cf8 \strokec8 4\cf7 \strokec7 \
\cf9 \strokec9 print\cf7 \strokec7 (a)\

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 [1, 2, 4]\
\pard\pardeftab720\li417\fi-8\sl720\sa240\partightenfactor0

\f0\b \cf2 Python Tuple\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/tuple"}}{\fldrslt 
\f1\b0 \cf6 \strokec6 Tuple}}
\f1\b0 \cf5 \strokec5 \'a0is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.\
Tuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.\
It is defined within parentheses\'a0()\'a0where items are separated by commas.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 t = (\cf8 \strokec8 5\cf7 \strokec7 ,\cf10 \strokec10 'program'\cf7 \strokec7 , \cf8 \strokec8 1\cf7 \strokec7 +\cf8 \strokec8 3j\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 We can use the slicing operator\'a0[]\'a0to extract items but we cannot change its value.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 t = (\cf8 \strokec8 5\cf7 \strokec7 ,\cf10 \strokec10 'program'\cf7 \strokec7 , \cf8 \strokec8 1\cf7 \strokec7 +\cf8 \strokec8 3j\cf7 \strokec7 )\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # t[1] = 'program'\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "t[1] = "\cf7 \strokec7 , t[\cf8 \strokec8 1\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # t[0:3] = (5, 'program', (1+3j))\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "t[0:3] = "\cf7 \strokec7 , t[\cf8 \strokec8 0\cf7 \strokec7 :\cf8 \strokec8 3\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # Generates error\cf7 \strokec7 \
\cf12 \strokec12 # Tuples are immutable\cf7 \strokec7 \
t[\cf8 \strokec8 0\cf7 \strokec7 ] = \cf8 \strokec8 10\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 t[1] =  program\
t[0:3] =  (5, 'program', (1+3j))\
Traceback (most recent call last):\
  File "test.py", line 11, in <module>\
    t[0] = 10\
TypeError: 'tuple' object does not support item assignment\
\pard\pardeftab720\li417\fi-8\sl720\sa240\partightenfactor0

\f0\b \cf2 Python Strings\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/string"}}{\fldrslt 
\f1\b0 \cf6 \strokec6 String}}
\f1\b0 \cf5 \strokec5 \'a0is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes,\'a0'''\'a0or\'a0""".\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 s = \cf10 \strokec10 "This is a string"\cf7 \strokec7 \
\cf9 \strokec9 print\cf7 \strokec7 (s)\
s = \cf10 \strokec10 '''A multiline\
string'''\cf7 \strokec7 \
\cf9 \strokec9 print\cf7 \strokec7 (s)\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 This is a string\
A multiline\
string\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Just like a list and tuple, the slicing operator\'a0[ ]\'a0can be used with strings. Strings, however, are immutable.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 s = \cf10 \strokec10 'Hello world!'\cf7 \strokec7 \
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # s[4] = 'o'\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "s[4] = "\cf7 \strokec7 , s[\cf8 \strokec8 4\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # s[6:11] = 'world'\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "s[6:11] = "\cf7 \strokec7 , s[\cf8 \strokec8 6\cf7 \strokec7 :\cf8 \strokec8 11\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # Generates error\cf7 \strokec7 \
\cf12 \strokec12 # Strings are immutable in Python\cf7 \strokec7 \
s[\cf8 \strokec8 5\cf7 \strokec7 ] =\cf10 \strokec10 'd'\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 s[4] =  o\
s[6:11] =  world\
Traceback (most recent call last):\
  File "<string>", line 11, in <module>\
TypeError: 'str' object does not support item assignment\

\f0\b \cf2 Python Set\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/set"}}{\fldrslt 
\f1\b0 \cf6 \strokec6 Set}}
\f1\b0 \cf5 \strokec5 \'a0is an unordered collection of unique items. Set is defined by values separated by comma inside braces\'a0\{ \}. Items in a set are not ordered.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 a = \{\cf8 \strokec8 5\cf7 \strokec7 ,\cf8 \strokec8 2\cf7 \strokec7 ,\cf8 \strokec8 3\cf7 \strokec7 ,\cf8 \strokec8 1\cf7 \strokec7 ,\cf8 \strokec8 4\cf7 \strokec7 \}\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # printing set variable\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "a = "\cf7 \strokec7 , a)\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # data type of variable a\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (type(a))\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 a =  \{1, 2, 3, 4, 5\}\
<class 'set'>\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 We can perform set operations like union, intersection on two sets. Sets have unique values. They eliminate duplicates.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 a = \{\cf8 \strokec8 1\cf7 \strokec7 ,\cf8 \strokec8 2\cf7 \strokec7 ,\cf8 \strokec8 2\cf7 \strokec7 ,\cf8 \strokec8 3\cf7 \strokec7 ,\cf8 \strokec8 3\cf7 \strokec7 ,\cf8 \strokec8 3\cf7 \strokec7 \}\
\cf9 \strokec9 print\cf7 \strokec7 (a)\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 \{1, 2, 3\}\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Since, set are unordered collection, indexing has no meaning. Hence, the slicing operator\'a0[]\'a0does not work.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 a = \{\cf8 \strokec8 1\cf7 \strokec7 ,\cf8 \strokec8 2\cf7 \strokec7 ,\cf8 \strokec8 3\cf7 \strokec7 \}\
\cf11 \strokec11 >>> \cf7 \strokec7 a[\cf8 \strokec8 1\cf7 \strokec7 ]\
Traceback (most recent call last):\
  File \cf10 \strokec10 "<string>"\cf7 \strokec7 , line \cf8 \strokec8 301\cf7 \strokec7 , \cf9 \strokec9 in\cf7 \strokec7  runcode\
  File \cf10 \strokec10 "<interactive input>"\cf7 \strokec7 , line \cf8 \strokec8 1\cf7 \strokec7 , \cf9 \strokec9 in\cf7 \strokec7  <module>\
TypeError: \cf10 \strokec10 'set'\cf7 \strokec7  object does \cf9 \strokec9 not\cf7 \strokec7  support indexing\
\pard\pardeftab720\li417\fi-8\sl720\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Python Dictionary\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/dictionary"}}{\fldrslt 
\f1\b0 \cf6 \strokec6 Dictionary}}
\f1\b0 \cf5 \strokec5 \'a0is an unordered collection of key-value pairs.\
It is generally used when we have a huge amount of data. Dictionaries are optimized for retrieving data. We must know the key to retrieve the value.\
In Python, dictionaries are defined within braces\'a0\{\}\'a0with each item being a pair in the form\'a0key:value. Key and value can be of any type.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 d = \{\cf8 \strokec8 1\cf7 \strokec7 :\cf10 \strokec10 'value'\cf7 \strokec7 ,\cf10 \strokec10 'key'\cf7 \strokec7 :\cf8 \strokec8 2\cf7 \strokec7 \}\
\cf11 \strokec11 >>> \cf7 \strokec7 type(d)\
<\cf9 \strokec9 class\cf7 \strokec7  '\cf13 \strokec13 dict\cf7 \strokec7 '>\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 We use key to retrieve the respective value. But not the other way around.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf7 \strokec7 d = \{\cf8 \strokec8 1\cf7 \strokec7 :\cf10 \strokec10 'value'\cf7 \strokec7 ,\cf10 \strokec10 'key'\cf7 \strokec7 :\cf8 \strokec8 2\cf7 \strokec7 \}\
\cf9 \strokec9 print\cf7 \strokec7 (type(d))\
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "d[1] = "\cf7 \strokec7 , d[\cf8 \strokec8 1\cf7 \strokec7 ])\
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "d['key'] = "\cf7 \strokec7 , d[\cf10 \strokec10 'key'\cf7 \strokec7 ])\
\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf12 \strokec12 # Generates error\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "d[2] = "\cf7 \strokec7 , d[\cf8 \strokec8 2\cf7 \strokec7 ])\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf4 \strokec4 <class 'dict'>\
d[1] =  value\
d['key'] =  2\
Traceback (most recent call last):\
  File "<string>", line 9, in <module>\
KeyError: 2\

\f0\b \cf2 Conversion between data types\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 We can convert between different data types by using different type conversion functions like\'a0int(),\'a0float(),\'a0str(), etc.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 float(\cf8 \strokec8 5\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf8 \strokec8 5.0\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Conversion from float to int will truncate the value (make it closer to zero).\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 int(\cf8 \strokec8 10.6\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf8 \strokec8 10\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 int(\cf8 \strokec8 -10.6\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf8 \strokec8 -10\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 Conversion to and from string must contain compatible values.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 float(\cf10 \strokec10 '2.5'\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf8 \strokec8 2.5\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 str(\cf8 \strokec8 25\cf7 \strokec7 )\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf10 \strokec10 '25'\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 int(\cf10 \strokec10 '1p'\cf7 \strokec7 )\
Traceback (most recent call last):\
  File \cf10 \strokec10 "<string>"\cf7 \strokec7 , line \cf8 \strokec8 301\cf7 \strokec7 , \cf9 \strokec9 in\cf7 \strokec7  runcode\
  File \cf10 \strokec10 "<interactive input>"\cf7 \strokec7 , line \cf8 \strokec8 1\cf7 \strokec7 , \cf9 \strokec9 in\cf7 \strokec7  <module>\
ValueError: invalid literal \cf9 \strokec9 for\cf7 \strokec7  int() \cf9 \strokec9 with\cf7 \strokec7  base \cf8 \strokec8 10\cf7 \strokec7 : \cf10 \strokec10 '1p'\cf7 \strokec7 \
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 We can even convert one sequence to another.\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 set([\cf8 \strokec8 1\cf7 \strokec7 ,\cf8 \strokec8 2\cf7 \strokec7 ,\cf8 \strokec8 3\cf7 \strokec7 ])\
\{\cf8 \strokec8 1\cf7 \strokec7 , \cf8 \strokec8 2\cf7 \strokec7 , \cf8 \strokec8 3\cf7 \strokec7 \}\
\cf11 \strokec11 >>> \cf7 \strokec7 tuple(\{\cf8 \strokec8 5\cf7 \strokec7 ,\cf8 \strokec8 6\cf7 \strokec7 ,\cf8 \strokec8 7\cf7 \strokec7 \})\
(\cf8 \strokec8 5\cf7 \strokec7 , \cf8 \strokec8 6\cf7 \strokec7 , \cf8 \strokec8 7\cf7 \strokec7 )\
\cf11 \strokec11 >>> \cf7 \strokec7 list(\cf10 \strokec10 'hello'\cf7 \strokec7 )\
[\cf10 \strokec10 'h'\cf7 \strokec7 , \cf10 \strokec10 'e'\cf7 \strokec7 , \cf10 \strokec10 'l'\cf7 \strokec7 , \cf10 \strokec10 'l'\cf7 \strokec7 , \cf10 \strokec10 'o'\cf7 \strokec7 ]\
\pard\pardeftab720\li417\fi-8\sl600\sa320\partightenfactor0
\cf5 \strokec5 To convert to dictionary, each element must be a pair:\
\pard\pardeftab720\li417\fi-8\sl400\partightenfactor0
\cf11 \strokec11 >>> \cf7 \strokec7 dict([[\cf8 \strokec8 1\cf7 \strokec7 ,\cf8 \strokec8 2\cf7 \strokec7 ],[\cf8 \strokec8 3\cf7 \strokec7 ,\cf8 \strokec8 4\cf7 \strokec7 ]])\
\{\cf8 \strokec8 1\cf7 \strokec7 : \cf8 \strokec8 2\cf7 \strokec7 , \cf8 \strokec8 3\cf7 \strokec7 : \cf8 \strokec8 4\cf7 \strokec7 \}\
\cf11 \strokec11 >>> \cf7 \strokec7 dict([(\cf8 \strokec8 3\cf7 \strokec7 ,\cf8 \strokec8 26\cf7 \strokec7 ),(\cf8 \strokec8 4\cf7 \strokec7 ,\cf8 \strokec8 44\cf7 \strokec7 )])\
\{\cf8 \strokec8 3\cf7 \strokec7 : \cf8 \strokec8 26\cf7 \strokec7 , \cf8 \strokec8 4\cf7 \strokec7 : \cf8 \strokec8 44\cf7 \strokec7 \}\cf4 \strokec4 \
}
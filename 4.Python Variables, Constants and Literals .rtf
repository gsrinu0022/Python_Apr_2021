{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Tahoma-Bold;\f1\fnil\fcharset0 Tahoma;}
{\colortbl;\red255\green255\blue255;\red252\green39\blue18;\red255\green255\blue255;\red28\green26\blue75;
\red28\green26\blue75;\red42\green44\blue51;\red133\green85\blue4;\red66\green147\blue62;\red147\green0\blue147;
\red8\green57\blue240;\red143\green144\blue150;\red14\green112\blue173;\red50\green94\blue238;}
{\*\expandedcolortbl;;\cssrgb\c100000\c25271\c7591;\cssrgb\c100000\c100000\c100000;\cssrgb\c14510\c14902\c36863;
\cssrgb\c14510\c14902\c36863\c70196;\cssrgb\c21961\c22745\c25882;\cssrgb\c59608\c40784\c392;\cssrgb\c31373\c63137\c30980;\cssrgb\c65098\c14902\c64314;
\cssrgb\c1961\c33725\c95294;\cssrgb\c62745\c63137\c65490;\cssrgb\c392\c51765\c73333;\cssrgb\c25098\c47059\c94902;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15540\viewkind0
\deftab720
\pard\tx550\tx584\pardeftab720\li592\fi10\sl1080\sa400\partightenfactor0

\f0\b\fs18 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Python Variables, Constants and Literals\

\f1\b0 \cf5 \strokec5 In this, you will learn about Python variables, constants, literals and their use cases.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf2 \strokec4 Python Variables\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl720\sa480\partightenfactor0

\f1\b0 \cf5 \strokec5 A variable is a named location used to store data in the memory. It is helpful to think of variables as a container that holds data that can be changed later in the program. For example,\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf6 \strokec6 number = \cf7 \strokec7 10\cf6 \strokec6 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 Here, we have created a variable named\'a0number. We have assigned the value\'a010\'a0to the variable.\
You can think of variables as a bag to store books in it and that book can be replaced at any time.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf6 \strokec6 number = \cf7 \strokec7 10\cf6 \strokec6 \
number = \cf7 \strokec7 1.1\cf6 \strokec6 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 Initially, the value of\'a0number\'a0was\'a010. Later, it was changed to\'a01.1.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 Note
\f1\b0 : In Python, we don't actually assign values to the variables. Instead, Python gives the reference of the object(value) to the variable.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf2 \strokec4 Assigning values to Variables in Python\

\f1\b0 \cf5 \strokec5 As you can see from the above example, you can use the assignment operator\'a0=\'a0to assign a value to a variable.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf4 \strokec4 Example 1: Declaring and assigning value to a variable\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 website = \cf8 \strokec8 "apple.com"\cf6 \strokec6 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (website)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 apple.com\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program, we assigned a value\'a0apple.com\'a0to the variable\'a0website. Then, we printed out the value assigned to\'a0website\'a0i.e.\'a0apple.com\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 Note
\f1\b0 : Python is a\'a0{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Type_inference"}}{\fldrslt \cf10 \strokec10 type-inferred}}\'a0language, so you don't have to explicitly define the variable type. It automatically knows that\'a0apple.com\'a0is a string and declares the\'a0website\'a0variable as a string.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 2: Changing the value of a variable\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 website = \cf8 \strokec8 "apple.com"\cf6 \strokec6 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (website)\
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf11 \strokec11 # assigning a new value to website\cf6 \strokec6 \
website = \cf8 \strokec8 "programiz.com"\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (website)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 apple.com\
programiz.com\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program, we have assigned\'a0apple.com\'a0to the\'a0website\'a0variable initially. Then, the value is changed to\'a0programiz.com.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 3: Assigning multiple values to multiple variables\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 a, b, c = \cf7 \strokec7 5\cf6 \strokec6 , \cf7 \strokec7 3.2\cf6 \strokec6 , \cf8 \strokec8 "Hello"\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6  (a)\
\cf9 \strokec9 print\cf6 \strokec6  (b)\
\cf9 \strokec9 print\cf6 \strokec6  (c)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 If we want to assign the same value to multiple variables at once, we can do this as:\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf6 \strokec6 x = y = z = \cf8 \strokec8 "same"\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6  (x)\
\cf9 \strokec9 print\cf6 \strokec6  (y)\
\cf9 \strokec9 print\cf6 \strokec6  (z)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 The second program assigns the\'a0same\'a0string to all the three variables\'a0x,\'a0y\'a0and\'a0z.\

\f0\b \cf2 \strokec4 Constants\

\f1\b0 \cf5 \strokec5 A constant is a type of variable whose value cannot be changed. It is helpful to think of constants as containers that hold information which cannot be changed later.\
You can think of constants as a bag to store some books which cannot be replaced once placed inside the bag.\

\f0\b \cf2 \strokec4 Assigning value to constant in Python\

\f1\b0 \cf5 \strokec5 In Python, constants are usually declared and assigned in a module. Here, the module is a new file containing variables, functions, etc which is imported to the main file. Inside the module, constants are written in all capital letters and underscores separating the words.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 3: Declaring and assigning value to a constant\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 Create a\'a0
\f0\b constant.py
\f1\b0 :\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf6 \strokec6 PI = \cf7 \strokec7 3.14\cf6 \strokec6 \
GRAVITY = \cf7 \strokec7 9.8\cf6 \strokec6 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 Create a\'a0
\f0\b main.py
\f1\b0 :\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 import\cf6 \strokec6  constant\
\
\cf9 \strokec9 print\cf6 \strokec6 (constant.PI)\
\cf9 \strokec9 print\cf6 \strokec6 (constant.GRAVITY)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 3.14\
9.8\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program, we create a\'a0
\f0\b constant.py
\f1\b0 \'a0module file. Then, we assign the constant value to\'a0PI\'a0and\'a0GRAVITY. After that, we create a\'a0
\f0\b main.py
\f1\b0 \'a0file and import the\'a0constant\'a0module. Finally, we print the constant value.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 Note
\f1\b0 : In reality, we don't use constants in Python. Naming them in all capital letters is a convention to separate them from variables, however, it does not actually prevent reassignment.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl720\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Rules and Naming Convention for Variables and constants\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0
\ls1\ilvl0
\f1\b0 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Constant and variable names should have a combination of letters in lowercase (a to z) or uppercase (
\f0\b A to Z
\f1\b0 ) or digits (
\f0\b 0 to 9
\f1\b0 ) or an underscore (
\f0\b _
\f1\b0 ). For example:snake_case\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 MACRO_CASE\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 camelCase\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 CapWords\uc0\u8232 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Create a name that makes sense. For example,\'a0vowel\'a0makes more sense than\'a0v.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 If you want to create a variable name having two words, use underscore to separate them.\'a0For example:my_name\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 current_salary\uc0\u8232 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Use capital letters possible to declare a constant. For example:PI\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 G\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	10.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 MASS\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	11.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 SPEED_OF_LIGHT\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	12.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 TEMP\uc0\u8232 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	13.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Never use special symbols like !, @, #, $, %, etc.\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	14.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Don't start a variable name with a digit.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl720\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Literals\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 Literal is a raw data given in a variable or constant. In Python, there are various types of literals they are as follows:\

\f0\b \cf2 \strokec4 Numeric Literals\

\f1\b0 \cf5 \strokec5 Numeric Literals are immutable (unchangeable). Numeric literals can belong to 3 different numerical types:\'a0Integer,\'a0Float, and\'a0Complex.\

\f0\b \cf2 \strokec4 Example 4: How to use Numeric literals in Python?\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 a = \cf7 \strokec7 0b1010\cf6 \strokec6  \cf11 \strokec11 #Binary Literals\cf6 \strokec6 \
b = \cf7 \strokec7 100\cf6 \strokec6  \cf11 \strokec11 #Decimal Literal \cf6 \strokec6 \
c = \cf7 \strokec7 0o310\cf6 \strokec6  \cf11 \strokec11 #Octal Literal\cf6 \strokec6 \
d = \cf7 \strokec7 0x12c\cf6 \strokec6  \cf11 \strokec11 #Hexadecimal Literal\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf11 \strokec11 #Float Literal\cf6 \strokec6 \
float_1 = \cf7 \strokec7 10.5\cf6 \strokec6  \
float_2 = \cf7 \strokec7 1.5e2\cf6 \strokec6 \
\
\cf11 \strokec11 #Complex Literal \cf6 \strokec6 \
x = \cf7 \strokec7 3.14j\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (a, b, c, d)\
\cf9 \strokec9 print\cf6 \strokec6 (float_1, float_2)\
\cf9 \strokec9 print\cf6 \strokec6 (x, x.imag, x.real)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 10 100 200 300\
10.5 150.0\
3.14j 3.14 0.0\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program,\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0
\ls2\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We assigned integer literals into different variables. Here,\'a0a\'a0is binary literal,\'a0b\'a0is a decimal literal,\'a0c\'a0is an octal literal and\'a0d\'a0is a hexadecimal literal.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 When we print the variables, all the literals are converted into decimal values.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\sa240\partightenfactor0
\ls2\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 10.5\'a0and\'a01.5e2\'a0are floating-point literals.\'a01.5e2\'a0is expressed with exponential and is equivalent to\'a01.5 * 102.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0
\ls2\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We assigned a complex literal i.e\'a03.14j\'a0in variable\'a0x. Then we use\'a0
\f0\b imaginary
\f1\b0 \'a0literal (x.imag) and\'a0
\f0\b real
\f1\b0 \'a0literal (x.real) to create imaginary and real parts of complex numbers.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 To learn more about Numeric Literals, refer to\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/numbers"}}{\fldrslt \cf10 \strokec10 Python Numbers}}.\

\f0\b \cf2 \strokec4 String literals\

\f1\b0 \cf5 \strokec5 A string literal is a sequence of characters surrounded by quotes. We can use both single, double, or triple quotes for a string. And, a character literal is a single character surrounded by single or double quotes.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 7: How to use string literals in Python?\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 strings = \cf8 \strokec8 "This is Python"\cf6 \strokec6 \
char = \cf8 \strokec8 "C"\cf6 \strokec6 \
multiline_str = \cf8 \strokec8 """This is a multiline string with more than one line code."""\cf6 \strokec6 \
unicode = \cf8 \strokec8 u"\\u00dcnic\\u00f6de"\cf6 \strokec6 \
raw_str = \cf8 \strokec8 r"raw \\n string"\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (strings)\
\cf9 \strokec9 print\cf6 \strokec6 (char)\
\cf9 \strokec9 print\cf6 \strokec6 (multiline_str)\
\cf9 \strokec9 print\cf6 \strokec6 (unicode)\
\cf9 \strokec9 print\cf6 \strokec6 (raw_str)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 This is Python\
C\
This is a multiline string with more than one line code.\
\'dcnic\'f6de\
raw \\n string\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program,\'a0This is Python\'a0is a string literal and\'a0C\'a0is a character literal.\
The value in triple-quotes\'a0"""\'a0assigned to the\'a0multiline_str\'a0is a multi-line string literal.\
The string\'a0u"\\u00dcnic\\u00f6de"\'a0is a Unicode literal which supports characters other than English. In this case,\'a0\\u00dc\'a0represents\'a0\'dc\'a0and\'a0\\u00f6\'a0represents\'a0\'f6.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\sa320\partightenfactor0
\cf5 r"raw \\n string"\'a0is a raw string literal.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sa800\partightenfactor0
\cf4 \strokec4 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl720\sa240\partightenfactor0

\f0\b \cf2 Boolean literals\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 A Boolean literal can have any of the two values:\'a0True\'a0or\'a0False.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 8: How to use boolean literals in Python?\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 x = (\cf7 \strokec7 1\cf6 \strokec6  == \cf12 \strokec12 True\cf6 \strokec6 )\
y = (\cf7 \strokec7 1\cf6 \strokec6  == \cf12 \strokec12 False\cf6 \strokec6 )\
a = \cf12 \strokec12 True\cf6 \strokec6  + \cf7 \strokec7 4\cf6 \strokec6 \
b = \cf12 \strokec12 False\cf6 \strokec6  + \cf7 \strokec7 10\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (\cf8 \strokec8 "x is"\cf6 \strokec6 , x)\
\cf9 \strokec9 print\cf6 \strokec6 (\cf8 \strokec8 "y is"\cf6 \strokec6 , y)\
\cf9 \strokec9 print\cf6 \strokec6 (\cf8 \strokec8 "a:"\cf6 \strokec6 , a)\
\cf9 \strokec9 print\cf6 \strokec6 (\cf8 \strokec8 "b:"\cf6 \strokec6 , b)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 x is True\
y is False\
a: 5\
b: 10\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program, we use boolean literal\'a0True\'a0and\'a0False. In Python,\'a0True\'a0represents the value as\'a01\'a0and\'a0False\'a0as\'a00. The value of\'a0x\'a0is\'a0True\'a0because\'a01\'a0is equal to\'a0True. And, the value of\'a0y\'a0is\'a0False\'a0because\'a01\'a0is not equal to\'a0False.\
Similarly, we can use the\'a0True\'a0and\'a0False\'a0in numeric expressions as the value. The value of\'a0a\'a0is\'a05\'a0because we add\'a0True\'a0which has a value of\'a01\'a0with\'a04. Similarly,\'a0b\'a0is\'a010\'a0because we add the\'a0False\'a0having value of\'a00\'a0with\'a010.\

\f0\b \cf2 \strokec4 Special literals\

\f1\b0 \cf5 \strokec5 Python contains one special literal i.e.\'a0None. We use it to specify that the field has not been created.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 9: How to use special literals in Python?\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 drink = \cf8 \strokec8 "Available"\cf6 \strokec6 \
food = \cf12 \strokec12 None\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 def\cf6 \strokec6  \cf13 \strokec13 menu\cf6 \strokec6 (x):\
    \cf9 \strokec9 if\cf6 \strokec6  x == drink:\
        \cf9 \strokec9 print\cf6 \strokec6 (drink)\
    \cf9 \strokec9 else\cf6 \strokec6 :\
        \cf9 \strokec9 print\cf6 \strokec6 (food)\
\
menu(drink)\
menu(food)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 Available\
None\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program, we define a\'a0menu\'a0function. Inside\'a0menu, when we set the argument as\'a0drink\'a0then, it displays\'a0Available. And, when the argument is\'a0food, it displays\'a0None.\

\f0\b \cf2 \strokec4 Literal Collections\

\f1\b0 \cf5 \strokec5 There are four different literal collections List literals, Tuple literals, Dict literals, and Set literals.\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 10: How to use literals collections in Python?\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0

\f1\b0 \cf6 \strokec6 fruits = [\cf8 \strokec8 "apple"\cf6 \strokec6 , \cf8 \strokec8 "mango"\cf6 \strokec6 , \cf8 \strokec8 "orange"\cf6 \strokec6 ] \cf11 \strokec11 #list\cf6 \strokec6 \
numbers = (\cf7 \strokec7 1\cf6 \strokec6 , \cf7 \strokec7 2\cf6 \strokec6 , \cf7 \strokec7 3\cf6 \strokec6 ) \cf11 \strokec11 #tuple\cf6 \strokec6 \
alphabets = \{\cf8 \strokec8 'a'\cf6 \strokec6 :\cf8 \strokec8 'apple'\cf6 \strokec6 , \cf8 \strokec8 'b'\cf6 \strokec6 :\cf8 \strokec8 'ball'\cf6 \strokec6 , \cf8 \strokec8 'c'\cf6 \strokec6 :\cf8 \strokec8 'cat'\cf6 \strokec6 \} \cf11 \strokec11 #dictionary\cf6 \strokec6 \
vowels = \{\cf8 \strokec8 'a'\cf6 \strokec6 , \cf8 \strokec8 'e'\cf6 \strokec6 , \cf8 \strokec8 'i'\cf6 \strokec6  , \cf8 \strokec8 'o'\cf6 \strokec6 , \cf8 \strokec8 'u'\cf6 \strokec6 \} \cf11 \strokec11 #set\cf6 \strokec6 \
\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf9 \strokec9 print\cf6 \strokec6 (fruits)\
\cf9 \strokec9 print\cf6 \strokec6 (numbers)\
\cf9 \strokec9 print\cf6 \strokec6 (alphabets)\
\cf9 \strokec9 print\cf6 \strokec6 (vowels)\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0

\f0\b \cf5 \strokec5 Output
\f1\b0 \
\pard\tx550\tx584\pardeftab720\li592\fi10\sl400\partightenfactor0
\cf4 \strokec4 ['apple', 'mango', 'orange']\
(1, 2, 3)\
\{'a': 'apple', 'b': 'ball', 'c': 'cat'\}\
\{'e', 'a', 'o', 'i', 'u'\}\
\pard\tx550\tx584\pardeftab720\li592\fi10\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program, we created a list of\'a0fruits, a tuple of\'a0numbers, a dictionary\'a0dict\'a0having values with keys designated to each value and a set of\'a0vowels.\
}
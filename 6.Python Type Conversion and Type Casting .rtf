{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Tahoma-Bold;\f1\fnil\fcharset0 Tahoma;}
{\colortbl;\red255\green255\blue255;\red134\green19\blue62;\red255\green255\blue255;\red28\green26\blue75;
\red28\green26\blue75;\red8\green57\blue240;\red42\green44\blue51;\red133\green85\blue4;\red147\green0\blue147;
\red66\green147\blue62;}
{\*\expandedcolortbl;;\cssrgb\c60282\c14051\c30968;\cssrgb\c100000\c100000\c100000;\cssrgb\c14510\c14902\c36863;
\cssrgb\c14510\c14902\c36863\c70196;\cssrgb\c1961\c33725\c95294;\cssrgb\c21961\c22745\c25882;\cssrgb\c59608\c40784\c392;\cssrgb\c65098\c14902\c64314;
\cssrgb\c31373\c63137\c30980;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15540\viewkind0
\deftab720
\pard\pardeftab720\li242\fi63\sl1080\sa400\partightenfactor0

\f0\b\fs18 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Python Type Conversion and Type Casting     
\f1\b0 \cf5 \strokec5 In this, you will learn about the Type conversion and uses of type conversion.\
Before learning\'a0Type Conversion in Python,\'a0you should have knowledge\'a0about\'a0{\field{\*\fldinst{HYPERLINK "https://www.programiz.com/python-programming/variables-datatypes"}}{\fldrslt \cf6 \strokec6 Python Data Types}}.\
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0

\f0\b \cf2 \strokec4 Type Conversion\

\f1\b0 \cf5 \strokec5 The process of converting the value of one data type (integer, string, float, etc.) to another data type is called type conversion. Python has two types of type conversion.\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Implicit Type Conversion\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Explicit Type Conversion\
\ls1\ilvl0
\f0\b \cf2 \strokec4 Implicit Type Conversion\
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 In Implicit type conversion, Python automatically converts one data type to another data type. This process doesn't need any user involvement.\
Let's see an example where Python promotes the conversion of the lower data type (integer) to the higher data type (float) to avoid data loss.\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0

\f0\b \cf4 \strokec4 Example 1: Converting integer to float\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0

\f1\b0 \cf7 \strokec7 num_int = \cf8 \strokec8 123\cf7 \strokec7 \
num_flo = \cf8 \strokec8 1.23\cf7 \strokec7 \
\
num_new = num_int + num_flo\
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "datatype of num_int:"\cf7 \strokec7 ,type(num_int))\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "datatype of num_flo:"\cf7 \strokec7 ,type(num_flo))\
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Value of num_new:"\cf7 \strokec7 ,num_new)\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "datatype of num_new:"\cf7 \strokec7 ,type(num_new))\cf4 \strokec4 \
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 When we run the above program, the output will be:\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0
\cf4 \strokec4 datatype of num_int: <class 'int'>\
datatype of num_flo: <class 'float'>\
\
Value of num_new: 124.23\
datatype of num_new: <class 'float'>\
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program,\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0
\ls2\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We add two variables\'a0num_int\'a0and\'a0num_flo, storing the value in\'a0num_new.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We will look at the data type of all three objects respectively.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 In the output, we can see the data type of\'a0num_int\'a0is an\'a0integer\'a0while the data type of\'a0num_flo\'a0is a\'a0float.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Also, we can see the\'a0num_new\'a0has a\'a0float\'a0data type because Python always converts smaller data types to larger data types to avoid the loss of data.\
\pard\pardeftab720\li242\fi63\sa800\partightenfactor0
\cf4 \strokec4 \
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 Now, let's try adding a string and an integer, and see how Python deals with it.\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0

\f0\b \cf2 \strokec4 Example 2: Addition of string(higher) data type and integer(lower) datatype\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0

\f1\b0 \cf7 \strokec7 num_int = \cf8 \strokec8 123\cf7 \strokec7 \
num_str = \cf10 \strokec10 "456"\cf7 \strokec7 \
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Data type of num_int:"\cf7 \strokec7 ,type(num_int))\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Data type of num_str:"\cf7 \strokec7 ,type(num_str))\
\
\cf9 \strokec9 print\cf7 \strokec7 (num_int+num_str)\cf4 \strokec4 \
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 When we run the above program, the output will be:\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0
\cf4 \strokec4 Data type of num_int: <class 'int'> \
Data type of num_str: <class 'str'> \
\
Traceback (most recent call last): \
  File "python", line 7, in <module> \
TypeError: unsupported operand type(s) for +: 'int' and 'str'\
\pard\pardeftab720\li242\fi63\partightenfactor0
\cf4 \
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program,\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0
\ls3\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We add two variables\'a0num_int\'a0and\'a0num_str.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 As we can see from the output, we got\'a0TypeError. Python is not able to use Implicit Conversion in such conditions.\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 However, Python has a solution for these types of situations which is known as Explicit Conversion.\
\ls3\ilvl0
\f0\b \cf2 \strokec4 Explicit Type Conversion\
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0

\f1\b0 \cf5 \strokec5 In Explicit Type Conversion, users convert the data type of an object to required data type. We use the predefined functions like\'a0int(),\'a0float(),\'a0str(), etc to perform explicit type conversion.\
This type of conversion is also called typecasting because the user casts (changes) the data type of the objects.\
Syntax :\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0
\cf4 \strokec4 <required_datatype>(expression)\
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 Typecasting can be done by assigning the required data type function to the expression.\

\f0\b \cf2 \strokec4 Example 3: Addition of string and integer using explicit conversion\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0

\f1\b0 \cf7 \strokec7 num_int = \cf8 \strokec8 123\cf7 \strokec7 \
num_str = \cf10 \strokec10 "456"\cf7 \strokec7 \
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Data type of num_int:"\cf7 \strokec7 ,type(num_int))\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Data type of num_str before Type Casting:"\cf7 \strokec7 ,type(num_str))\
\
num_str = int(num_str)\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Data type of num_str after Type Casting:"\cf7 \strokec7 ,type(num_str))\
\
num_sum = num_int + num_str\
\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Sum of num_int and num_str:"\cf7 \strokec7 ,num_sum)\
\cf9 \strokec9 print\cf7 \strokec7 (\cf10 \strokec10 "Data type of the sum:"\cf7 \strokec7 ,type(num_sum))\cf4 \strokec4 \
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 When we run the above program, the output will be:\
\pard\pardeftab720\li242\fi63\sl400\partightenfactor0
\cf4 \strokec4 Data type of num_int: <class 'int'>\
Data type of num_str before Type Casting: <class 'str'>\
\
Data type of num_str after Type Casting: <class 'int'>\
\
Sum of num_int and num_str: 579\
Data type of the sum: <class 'int'>\
\pard\pardeftab720\li242\fi63\sl600\sa320\partightenfactor0
\cf5 \strokec5 In the above program,\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We add\'a0num_str\'a0and\'a0num_int\'a0variable.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We converted\'a0num_str\'a0from string(higher) to integer(lower) type using\'a0int()\'a0function to perform the addition.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 After converting\'a0num_str\'a0to an integer value, Python is able to add these two variables.\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 We got the\'a0num_sum\'a0value and data type to be an integer.\
\ls4\ilvl0
\f0\b \cf2 \strokec4 Key Points to Remember\
\pard\pardeftab720\li242\fi63\sl600\sa240\partightenfactor0
\ls5\ilvl0
\f1\b0 \cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Type Conversion is the conversion of object from one data type to another data type.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Implicit Type Conversion is automatically performed by the Python interpreter.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Python avoids the loss of data in Implicit Type Conversion.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Explicit Type Conversion is also called Type Casting, the data types of objects are converted using predefined functions by the user.\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 In Type Casting, loss of data may occur as we enforce the object to a specific data type.\
}